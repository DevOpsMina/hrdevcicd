{"version":3,"sources":["../src/matcher/email-matcher.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,4BAA4B,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAC9E,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGlD;;;;;;;GAOG;AACH;IAAkC,wCAAO;IAAzC;QAAA,qEAgDC;QA9CA;;;;;;;WAOG;QACO,kBAAY,GAAG,CAAC;YACzB,IAAI,iBAAiB,GAAG,0BAA0B,EACjD,2BAA2B,GAAG,oBAAoB,EAClD,eAAe,GAAG,4BAA4B,GAAG,iBAAiB,EAClE,yBAAyB,GAAG,eAAe,GAAG,2BAA2B,EACtE,UAAU,GAAG,IAAI,MAAM,CAAE,MAAM,GAAG,eAAe,GAAG,OAAO,GAAG,eAAe,GAAG,uBAAuB,GAAG,yBAAyB,GAAG,UAAU,CAAC,CAAC;YAEtJ,OAAO,IAAI,MAAM,CAAE;gBAClB,UAAU,CAAC,MAAM;gBACjB,gBAAgB,CAAE,CAAC,CAAE;gBACrB,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAG,sBAAsB;aAC/C,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,IAAI,CAAE,CAAC;QACtB,CAAC,CAAE,EAAE,CAAC;;IA0BP,CAAC;IAvBA;;OAEG;IACH,mCAAY,GAAZ,UAAc,IAAY;QACzB,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,EAChC,UAAU,GAAG,IAAI,CAAC,UAAU,EAC5B,OAAO,GAAY,EAAE,EACrB,KAA6B,CAAC;QAElC,OAAO,CAAE,KAAK,GAAG,YAAY,CAAC,IAAI,CAAE,IAAI,CAAE,CAAE,KAAK,IAAI,EAAG;YACvD,IAAI,WAAW,GAAG,KAAK,CAAE,CAAC,CAAE,CAAC;YAE7B,OAAO,CAAC,IAAI,CAAE,IAAI,UAAU,CAAE;gBAC7B,UAAU,EAAI,UAAU;gBACxB,WAAW,EAAG,WAAW;gBACzB,MAAM,EAAQ,KAAK,CAAC,KAAK;gBACzB,KAAK,EAAS,WAAW;aACzB,CAAE,CAAE,CAAC;SACN;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAEF,mBAAC;AAAD,CAhDA,AAgDC,CAhDiC,OAAO,GAgDxC","file":"email-matcher.js","sourcesContent":["import { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr, getDomainNameStr } from \"../regex-lib\";\nimport { tldRegex } from \"./tld-regex\";\nimport { EmailMatch } from \"../match/email-match\";\nimport { Match } from \"../match/match\";\n\n/**\n * @class Autolinker.matcher.Email\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find email matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n */\nexport class EmailMatcher extends Matcher {\n\n\t/**\n\t * The regular expression to match email addresses. Example match:\n\t *\n\t *     person@place.com\n\t *\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t */\n\tprotected matcherRegex = (function() {\n\t\tvar specialCharacters = '!#$%&\\'*+\\\\-\\\\/=?^_`{|}~',\n\t\t\trestrictedSpecialCharacters = '\\\\s\"(),:;<>@\\\\[\\\\]',\n\t\t\tvalidCharacters = alphaNumericAndMarksCharsStr + specialCharacters,\n\t\t\tvalidRestrictedCharacters = validCharacters + restrictedSpecialCharacters,\n\t\t    emailRegex = new RegExp( '(?:[' + validCharacters + '](?:[' + validCharacters + ']|\\\\.(?!\\\\.|@))*|\\\\\"[' + validRestrictedCharacters + '.]+\\\\\")@');\n\n\t\treturn new RegExp( [\n\t\t\temailRegex.source,\n\t\t\tgetDomainNameStr( 1 ),\n\t\t\t'\\\\.', tldRegex.source   // '.com', '.net', etc\n\t\t].join( \"\" ), 'gi' );\n\t} )();\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet matchedText = match[ 0 ];\n\n\t\t\tmatches.push( new EmailMatch( {\n\t\t\t\ttagBuilder  : tagBuilder,\n\t\t\t\tmatchedText : matchedText,\n\t\t\t\toffset      : match.index,\n\t\t\t\temail       : matchedText\n\t\t\t} ) );\n\t\t}\n\n\t\treturn matches;\n\t}\n\n}\n"]}