{"version":3,"sources":["../src/htmlParser/element-node.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAEvD;;;;;;;;GAQG;AACH;IAAiC,uCAAQ;IAkBxC;;;;OAIG;IACH,qBAAa,GAAsB;QAAnC,YACC,kBAAO,GAAG,CAAE,SAIZ;QA1BD;;;;WAIG;QACH,aAAO,GAAW,EAAE,CAAC,CAAE,gGAAgG;QAEvH;;;;;WAKG;QACH,aAAO,GAAY,KAAK,CAAC,CAAE,gGAAgG;QAW1H,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC3B,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;;IAC5B,CAAC;IAGD;;;;OAIG;IACH,6BAAO,GAAP;QACC,OAAO,SAAS,CAAC;IAClB,CAAC;IAGD;;;;;OAKG;IACH,gCAAU,GAAV;QACC,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAGD;;;;;OAKG;IACH,+BAAS,GAAT;QACC,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAEF,kBAAC;AAAD,CA9DA,AA8DC,CA9DgC,QAAQ,GA8DxC","file":"element-node.js","sourcesContent":["import { HtmlNode, HtmlNodeConfig } from \"./html-node\";\n\n/**\n * @class Autolinker.htmlParser.ElementNode\n * @extends Autolinker.htmlParser.HtmlNode\n *\n * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n *\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more\n * details.\n */\nexport class ElementNode extends HtmlNode {\n\n\t/**\n\t * @cfg {String} tagName (required)\n\t *\n\t * The name of the tag that was matched.\n\t */\n\ttagName: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} closing (required)\n\t *\n\t * `true` if the element (tag) is a closing tag, `false` if its an opening\n\t * tag.\n\t */\n\tclosing: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration options for this class, specified\n\t *   in an Object.\n\t */\n\tconstructor( cfg: ElementNodeConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.tagName = cfg.tagName;\n\t\tthis.closing = cfg.closing;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'element';\n\t}\n\n\n\t/**\n\t * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag,\n\t * returns \"img\".\n\t *\n\t * @return {String}\n\t */\n\tgetTagName() {\n\t\treturn this.tagName;\n\t}\n\n\n\t/**\n\t * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt;\n\t * returns `false`, while &lt;/div&gt; returns `true`.\n\t *\n\t * @return {Boolean}\n\t */\n\tisClosing() {\n\t\treturn this.closing;\n\t}\n\n}\n\nexport interface ElementNodeConfig extends HtmlNodeConfig {\n\ttagName: string;\n\tclosing: boolean;\n}"]}